### 算法
#####数独

##### leetcode 题目，提供一个二维str数组，缺省数字使用“.”代替，要求能补完所有“.”的内容，并使数组的行，列，块的数字均只出现一次。
##### 解法思路：递归回溯，从第一个“.”开始，遍历1-9所有数字，并检查此时对于这个数字所在的行，列，块，它们内部的元素是否唯一，如果唯一，递归调用下一个，如果遍历完成仍然不唯一，返回False并将元素重置为“.”
```python
class Solution:
    def solveSudoku(self, board: List[List[str]]) -> None:
        """
        入参数组 List[List[str]]
        每个子数组内元素不重复，所有list[i]构成的数组元素不重复，九宫格内元素不重复
        :return List[List]
        """
        for i, x in enumerate(board):
            for v, j in enumerate(x):
                if j != ".":
                    board[i][v] = int(j)

        i, j = self._next(board)
        self._bfs(board, i, j)
        board = [[str(i) for i in row] for row in board]
        print(board)

    def _bfs(self, board, i, j):
        for num in range(1,10):
            board[j][i] = num
            status = self._is_false(board, i, j)
            if not status:
                continue
            else:
                x, y = self._next(board)
                if x is not None and y is not None:
                    next_s =  self._bfs(board, x, y)
                else:
                    return True
                if not next_s:
                    continue
                else:
                    return True
        else:
            board[j][i] = "."
            return False

    @staticmethod
    def _next(board):
        for j,v in enumerate(board):
            for i,x in enumerate(v):
                if x == ".":
                    return i, j
        else:
            return None, None

    @staticmethod
    def _is_false(board, i ,j):
        """
        检查行，列，九宫格内元素是否重复
        :return: boolean
        """
        line = board[j]
        column = [a[i] for a in board]
        block = list()
        for x in range(9):
            block.append(board[(j//3)*3+(x//3)][(i//3)*3+(x%3)])

        for v in [line, column, block]:
            temp_set = set()
            for item in v:
                if item == ".":
                    continue
                if item not in temp_set:
                    temp_set.add(item)
                else:
                    return False

        return True


if __name__ == '__main__':
    s = Solution()
    s.solveSudoku([["5","3",".",".","7",".",".",".","."],["6",".",".","1","9","5",".",".","."],[".","9","8",".",".",".",".","6","."],["8",".",".",".","6",".",".",".","3"],["4",".",".","8",".","3",".",".","1"],["7",".",".",".","2",".",".",".","6"],[".","6",".",".",".",".","2","8","."],[".",".",".","4","1","9",".",".","5"],[".",".",".",".","8",".",".","7","9"]])
```